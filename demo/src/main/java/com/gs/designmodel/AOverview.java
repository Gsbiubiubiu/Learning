package com.gs.designmodel;

/**
 * @author: Gaos
 * @Date: 2022-10-31 15:15
 **/
public class AOverview {
    /**
     * 设计模式概述
     *
     * 创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。
     *           单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。
     *
     * 结构型模式：把类或对象结合在一起形成一个更大的结构。
     *           适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。
     *
     * 行为型模式：类和对象如何交互，及划分责任和算法。
     *          模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、责任链模式、访问者模式。
     */


    /*
        观察者模式
        定义了对象之间的一对多的依赖，这样一来，当一个对象改变时，它的所有的依赖者都会收到通知并自动更新。
        1、服务号就是主题，业务就是推送消息

        2、观察者只需要订阅主题，只要有新的消息就会送来

        3、当不想要此主题消息时，取消订阅

        4、只要服务号还在，就会一直有人订阅

        以微信服务号为背景，给出观察者模式的示例代码
        ObserverModel
     */

    /*
        工厂模式
        工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，根
        据工厂的抽象程度可分为工厂方法模式和抽象工厂模式。该模式用于封装和管理对象的创建，是一种创建型模式。
        本文从一个具体的例子逐步深入分析，来体会三种工厂模式的应用场景和利弊。

        1.简单工厂模式
        该模式对对象创建管理方式最为简单，因为其仅仅简单的对不同类对象的创建进行了一层薄薄的封装。
        该模式通过向工厂传递类型来指定要创建的对象。
        2.工厂方法模式
        定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法模式把类实例化的过程推迟到子类。
        3.抽象工厂模式
        抽象工厂模式通过在AbstarctFactory中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，
        当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干。

     */

    /*
        策略模式（Strategy Pattern）属于对象的行为模式。
        其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。
        策略模式使得算法可以在不影响到客户端的情况下发生变化。其主要目的是通过定义相似的算法，替换if else 语句写法，并且可以随时相互替换。
     */
}