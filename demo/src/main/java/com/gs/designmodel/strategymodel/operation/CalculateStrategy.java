package com.gs.designmodel.strategymodel.operation;

/**
 * @author: Gaos
 * @Date: 2022-11-23 16:22
 *
 * 这里为了方便理解，我们就拿刚学习Java的时候使用计算方法来说吧。
 * 在使用计算器进行计算的时候，会经常用到加减乘除方法。如果我们想得到两个数字相加的和，我们需要用到“+”符号，得到相减的差，需要用到“-”符号等等。
 * 虽然我们可以通过字符串比较使用if/else写成通用方法，但是计算的符号每次增加，我们就不得不加在原先的方法中进行增加相应的代码，
 * 如果后续计算方法增加、修改或删除，那么会使后续的维护变得困难。
 * 但是在这些方法中，我们发现其基本方法是固定的，这时我们就可以通过策略模式来进行开发，
 * 可以有效避免通过if/else来进行判断，即使后续增加其他的计算规则也可灵活进行调整。
 *
 * 首先定义一个抽象策略角色，并拥有一个计算的方法。
 **/
public interface CalculateStrategy {

    /**
     * 做操作
     * @param num1
     * @param num2
     * @return
     */
    int doOperation(int num1, int num2);
}
